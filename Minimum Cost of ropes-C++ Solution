#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class Solution {
public:
    // Function to return the minimum cost of connecting the ropes
    long long minCost(vector<long long>& arr) {
        long long cost = 0;

        // Min-heap (priority queue) to get the smallest elements first
        priority_queue<long long, vector<long long>, greater<long long>> pq;

        // Push all elements of the array into the priority queue
        for (int i = 0; i < arr.size(); i++) {
            pq.push(arr[i]);
        }

        // While there are more than one ropes, combine the two smallest
        while (pq.size() > 1) {
            // Pop the two smallest elements
            long long a = pq.top();
            pq.pop();
            long long b = pq.top();
            pq.pop();

            // Add their cost and push the combined length back into the queue
            long long sum = a + b;
            cost += sum;
            pq.push(sum);
        }

        // Return the total cost
        return cost;
    }
};

int main() {
    // Number of test cases
    int n;
    cout << "Enter number of test cases: ";
    cin >> n;

    Solution sol;

    // Process each test case
    for (int i = 0; i < n; i++) {
        int size;
        cout << "\nEnter number of ropes for test case " << i+1 << ": ";
        cin >> size;
        
        vector<long long> ropes(size);
        cout << "Enter the lengths of the ropes: ";
        for (int j = 0; j < size; j++) {
            cin >> ropes[j];
        }

        // Calculate and print the minimum cost for the current test case
        long long result = sol.minCost(ropes);
        cout << "The minimum cost to connect the ropes for test case " << i+1 << " is: " << result << endl;
    }

    return 0;
}
