#include <iostream>
#include <vector>
#include <sstream>
#include <algorithm>
using namespace std;

class Solution {
public:
    vector<int> findMajority(vector<int>& nums) {
        int n = nums.size();
        if (n == 0) return vector<int>{};
        
        int candidate1 = 0, candidate2 = 0, count1 = 0, count2 = 0;
        
        // First pass: Find potential candidates
        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            } else if (count1 == 0) {
                candidate1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }
        
        // Second pass: Verify the candidates
        count1 = 0;
        count2 = 0;
        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            }
        }
        
        // Collect the result
        vector<int> res;
        if (count1 > n / 3) {
            res.push_back(candidate1);
        }
        if (count2 > n / 3) {
            res.push_back(candidate2);
        }
        
        return res.empty() ? vector<int>{-1} : res;
    }
};

int main() {
    int t;
    cin >> t;
    cin.ignore();  // To ignore the newline character after integer input
    while (t--) {
        string s;
        getline(cin, s);
        stringstream ss(s);
        vector<int> nums;
        int num;
        while (ss >> num) {
            nums.push_back(num);
        }
        
        Solution ob;
        vector<int> ans = ob.findMajority(nums);
        for (int num : ans) {
            cout << num << " ";
        }
        cout << endl;
    }
    return 0;
}
